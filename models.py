from datetime import datetime
from app import db
from sqlalchemy.dialects.postgresql import JSON
from sqlalchemy import Text

class Project(db.Model):
    """Model for MEP design projects"""
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.Text)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Project requirements
    requirements = db.Column(JSON, nullable=True)
    
    # Store file paths
    blueprint_file = db.Column(db.String(255), nullable=True)
    building_code_file = db.Column(db.String(255), nullable=True)
    
    # Output design information
    design_data = db.Column(JSON, nullable=True)
    output_files = db.relationship('OutputFile', backref='project', lazy=True)
    feedback = db.relationship('Feedback', backref='project', lazy=True)

    def __repr__(self):
        return f'<Project {self.name}>'

class OutputFile(db.Model):
    """Model for output files generated by the system"""
    id = db.Column(db.Integer, primary_key=True)
    project_id = db.Column(db.Integer, db.ForeignKey('project.id'), nullable=False)
    file_type = db.Column(db.String(50), nullable=False)  # DWG, DXF, IFC, etc.
    file_path = db.Column(db.String(255), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    def __repr__(self):
        return f'<OutputFile {self.file_type}>'

class BuildingCode(db.Model):
    """Model for parsed building codes"""
    id = db.Column(db.Integer, primary_key=True)
    code_type = db.Column(db.String(100), nullable=False)  # Mechanical, Electrical, Plumbing
    region = db.Column(db.String(100), nullable=False)  # City, State, Country
    rule_id = db.Column(db.String(50))  # Code section identifier
    description = db.Column(db.Text, nullable=False)
    rule_data = db.Column(JSON)  # Structured rule data for automated processing
    
    def __repr__(self):
        return f'<BuildingCode {self.code_type} - {self.rule_id}>'

class Feedback(db.Model):
    """Model for user feedback on designs"""
    id = db.Column(db.Integer, primary_key=True)
    project_id = db.Column(db.Integer, db.ForeignKey('project.id'), nullable=False)
    component = db.Column(db.String(100))  # Which component the feedback is about
    comment = db.Column(db.Text, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    def __repr__(self):
        return f'<Feedback for Project {self.project_id}>'

class SpatialData(db.Model):
    """Model for storing extracted spatial data from blueprints"""
    id = db.Column(db.Integer, primary_key=True)
    project_id = db.Column(db.Integer, db.ForeignKey('project.id'), nullable=False)
    data_type = db.Column(db.String(50))  # Rooms, Walls, Doors, etc.
    data = db.Column(JSON, nullable=False)  # Spatial data in GeoJSON format
    
    def __repr__(self):
        return f'<SpatialData {self.data_type} for Project {self.project_id}>'

class MEPDesign(db.Model):
    """Model for MEP design data"""
    id = db.Column(db.Integer, primary_key=True)
    project_id = db.Column(db.Integer, db.ForeignKey('project.id'), nullable=False)
    design_type = db.Column(db.String(50), nullable=False)  # Mechanical, Electrical, Plumbing
    design_data = db.Column(JSON, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    def __repr__(self):
        return f'<MEPDesign {self.design_type} for Project {self.project_id}>'
